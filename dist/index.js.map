{
  "version": 3,
  "sources": ["../src/utils/utils.ts", "../src/assets.ts", "../src/components/asteroids.ts", "../src/components/bullet.ts", "../src/components/health.ts", "../src/utils/keyboard.ts", "../src/components/player.ts", "../src/components/ui.ts", "../src/main/game.ts", "../src/index.ts"],
  "sourcesContent": ["\uFEFFexport function getAngleFromVector(v: { x: number; y: number }): number {\r\n    return Math.atan2(v.y, v.x) + Math.PI/2;\r\n}\r\n\r\nexport function NormalizeVectorFromPoints(v1: { x: number; y: number }, v2: { x: number; y: number }): { x: number; y: number } {\r\n    var Vlength = distance(v1, v2);\r\n    return { x: (v1.x - v2.x) / Vlength, y: (v1.y - v2.y) / Vlength };\r\n\r\n}\r\n\r\nexport function distance(p1: { x: number; y: number }, p2: { x: number; y: number }): number {\r\n    var vx = p1.x - p2.x;\r\n    var vy = p1.y - p2.y;\r\n    var Vlength = Math.sqrt(vx * vx + vy * vy)\r\n    return Vlength;\r\n}\r\nexport function swapAndSlow(v1: { x: number; y: number }, v2: { x: number; y: number }) {\r\n    var tmp = v1.x;\r\n    v1.x = v2.x;\r\n    v2.x = tmp;\r\n\r\n    tmp = v1.y; \r\n    v1.y = v2.y;\r\n    v2.y = tmp;\r\n    return [v1, v2];\r\n}\r\n\r\nexport function addImageProcess(src: string): Promise<HTMLImageElement>{\r\n    return new Promise((resolve, reject) => {\r\n      let img = new Image()\r\n      img.onload = () => resolve(img)\r\n      img.onerror = reject\r\n      img.src = src\r\n    })\r\n  }\r\n\r\nexport function getRandomValueFromRange(min: number, max: number, rng = Math.random) {\r\n    const delta = max - min\r\n\r\n    return min + delta * rng()\r\n}\r\n\r\nexport function getRandomIntegerFromRange(min: number, max: number, rng = Math.random) {\r\n    return Math.round(getRandomValueFromRange(min - 0.5 + Number.EPSILON, max + 0.5 - Number.EPSILON, rng))\r\n}\r\n\r\nexport function normalise(v: {x: number; y: number;}) {\r\n    const vLength = distance(v, { x: 0, y: 0 })\r\n    if (vLength === 0) return { x: 0, y: 0 };\r\n    return {\r\n        x: v.x / vLength,\r\n        y: v.y / vLength\r\n    }\r\n}\r\n\r\n", "import { addImageProcess } from \"./utils/utils\";\r\n\r\nexport class Assets {\r\n    image_spaceship: HTMLImageElement;\r\n    image_spaceship_engines: HTMLImageElement;\r\n    image_bullet: HTMLImageElement;\r\n    image_asteroid_1: HTMLImageElement;\r\n    image_asteroid_2: HTMLImageElement;\r\n    image_health: HTMLImageElement;\r\n    image_shipshield: HTMLImageElement;\r\n    constructor() {}\r\n\r\n    async preload() {\r\n        return  [this.image_spaceship, this.image_spaceship_engines, this.image_bullet, this.image_asteroid_1, this.image_asteroid_2, this.image_health, this.image_shipshield]= await Promise.all([\r\n            addImageProcess(\"./spaceship.png\"),\r\n            addImageProcess(\"./spaceship-engines.png\"),\r\n            addImageProcess(\"./bullet.png\"),\r\n            addImageProcess(\"./asteroid1.png\"),\r\n            addImageProcess(\"./asteroid2.png\"),\r\n            addImageProcess(\"./health.png\"),\r\n            addImageProcess(\"./shipshield.png\"),\r\n        ])\r\n    }\r\n}", "\uFEFFimport { Assets } from \"../assets\";\r\nimport { distance, NormalizeVectorFromPoints, swapAndSlow, getRandomValueFromRange, normalise, getRandomIntegerFromRange } from \"../utils/utils\";\r\nimport { Player } from \"./player\";\r\n\r\nexport class Asteroid {\r\n    pos = { x: 0, y: 0 };\r\n    movV = { x: 0, y: 0 };\r\n\r\n    angle = 0;\r\n    health = 0;\r\n\r\n    constructor(private asset: HTMLImageElement, pos: { x: number; y: number }, movV: { x: number; y: number }, public size: number) {\r\n        this.pos.x = pos.x;\r\n        this.pos.y = pos.y;\r\n        this.movV.x = movV.x * getRandomValueFromRange(0.1, 2.5);\r\n        this.movV.y = movV.y * getRandomValueFromRange(0.1, 2.5);\r\n        this.health = Math.ceil(this.size/10);\r\n    }\r\n    private scale = 1\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        ctx.translate(this.pos.x, this.pos.y);\r\n        ctx.rotate(this.angle);\r\n        ctx.scale(this.scale/30 * this.size, this.scale/30 * this.size);\r\n        ctx.drawImage(this.asset, -25.5, -25.5)\r\n        ctx.restore();\r\n        this.angle += 0.02;\r\n        this.pos.x -= this.movV.x;\r\n        this.pos.y -= this.movV.y;\r\n\r\n    }\r\n}\r\n\r\nexport class AsteroidContainer {\r\n    asteroids: Asteroid[] = [];\r\n\r\n    constructor(private assets: Assets, private player: Player, private canvas: HTMLCanvasElement) {\r\n        setInterval(() => {\r\n\r\n            const spawn = () => {\r\n                if (this.asteroids.length < 500) {\r\n                    const angle = getRandomValueFromRange(0, Math.PI * 2);\r\n                    const vector = normalise({ x: Math.cos(angle), y: Math.sin(angle) });\r\n                    const distance = getRandomValueFromRange(2000, 2500);\r\n        \r\n                    const asteroidsSpawn = {\r\n                        x: this.player.pos.x + (vector.x * distance),\r\n                        y: this.player.pos.y + (vector.y * distance)\r\n                    }\r\n        \r\n                    this.asteroids.push(new Asteroid(\r\n                        Math.random() > 0.5 ? this.assets.image_asteroid_1 : this.assets.image_asteroid_2,\r\n                        asteroidsSpawn,\r\n                        NormalizeVectorFromPoints(\r\n                            asteroidsSpawn,\r\n                            { x: (this.player.pos.x + getRandomValueFromRange(-100, 100)), y: (this.player.pos.y + getRandomValueFromRange(-100, 100)) }),\r\n                        getRandomIntegerFromRange(10, 100)\r\n                    ));\r\n                }\r\n            } \r\n            \r\n            for(let i = 0; i < 50; i++) {\r\n                spawn();\r\n            }\r\n        }, 2500)\r\n    }\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        \r\n        for (var i = 0; i < this.asteroids.length; i++) {\r\n            this.asteroids[i].render(ctx);\r\n        }\r\n\r\n        this.remove();\r\n        this.checkCollision();\r\n    }\r\n    remove() {\r\n        for (var i = this.asteroids.length - 1; i >= 0; i--) {\r\n            if (distance(this.player.pos, this.asteroids[i].pos) > 4000) {\r\n                this.asteroids.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    checkCollision() {\r\n        for (var i = 0; i < this.asteroids.length; i++) {\r\n            for (var j = 0; j < this.asteroids.length; j++) {\r\n                if (i === j) { continue; }\r\n                if (distance(this.asteroids[i].pos, this.asteroids[j].pos) < this.asteroids[i].size + this.asteroids[j].size) {\r\n                    var vBetween = NormalizeVectorFromPoints(this.asteroids[i].pos, this.asteroids[j].pos)\r\n                    this.asteroids[i].pos.x += vBetween.x;\r\n                    this.asteroids[i].pos.y += vBetween.y;\r\n                    this.asteroids[j].pos.x -= vBetween.x;\r\n                    this.asteroids[j].pos.y -= vBetween.y;\r\n                    var swapArray = swapAndSlow(this.asteroids[i].movV, this.asteroids[j].movV);\r\n                    this.asteroids[i].movV = swapArray[0];\r\n                    this.asteroids[j].movV = swapArray[1];\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n", "\uFEFFimport { Assets } from \"../assets\";\r\nimport { distance, getAngleFromVector } from \"../utils/utils\";\r\nimport { Player } from \"./player\";\r\n\r\nexport class Bullet {\r\n    movV = { x: 0, y: 0 };\r\n    angle = 0;\r\n    constructor(private asset: HTMLImageElement, public pos: { x: number; y: number }, movV: { x: number; y: number }) {\r\n        this.pos.x = pos.x;\r\n        this.pos.y = pos.y;\r\n        this.movV.x = movV.x * 10;\r\n        this.movV.y = movV.y * 10;\r\n        this.angle = getAngleFromVector(movV);\r\n    }\r\n    private scale = 0.5\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        ctx.translate(this.pos.x, this.pos.y);\r\n        ctx.scale(this.scale, this.scale);\r\n        ctx.rotate(this.angle);\r\n        ctx.drawImage(this.asset, 2.5, 0);\r\n        ctx.restore();\r\n        this.pos.x += this.movV.x;\r\n        this.pos.y += this.movV.y;\r\n    }\r\n\r\n} \r\n\r\nexport class BulletContainer {\r\n    bullets: Bullet[] = []\r\n    constructor(private assets: Assets, private player: Player) {\r\n\r\n    }\r\n    addBullet(pos: {x: number; y: number;}, angle: {x: number; y: number;}) {\r\n        this.bullets.push(new Bullet(this.assets.image_bullet, pos, angle ));\r\n    }\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        this.bullets.forEach(bullet => {\r\n            bullet.render(ctx);\r\n        })\r\n\r\n        this.remove();\r\n    }\r\n\r\n    remove() {\r\n        for (var i = this.bullets.length - 1; i >= 0; i--) {\r\n            if (distance(this.player.pos, this.bullets[i].pos) > 4000) {\r\n                this.bullets.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n}", "\uFEFFimport { getRandomValueFromRange } from \"../utils/utils\";\r\nimport { Player } from \"./player\";\r\n\r\nexport class Health {\r\n    pos = { x: 0, y: 0 }\r\n    angle = 0;\r\n    available = false;\r\n    private TimeoutHandler: NodeJS.Timeout;\r\n    isShowing = false;\r\n\r\n    constructor(private asset: HTMLImageElement, private canvas: HTMLCanvasElement, private player: Player) {\r\n    }\r\n    private scale = 0.5\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        if (this.available) {\r\n            ctx.save();\r\n            ctx.translate(this.pos.x, this.pos.y);\r\n            ctx.scale(this.scale, this.scale);\r\n            ctx.rotate(this.angle);\r\n            ctx.drawImage(this.asset, -25.5, -25.5)\r\n            ctx.restore();\r\n            this.angle += 0.02;\r\n        }\r\n    }\r\n\r\n    show() {\r\n        if (this.isShowing) { return };\r\n        this.isShowing = true;\r\n\r\n        var callback = () => {\r\n            this.available = !this.available;\r\n            this.pos.x = getRandomValueFromRange(this.player.pos.x - this.canvas.width*0.5, this.player.pos.x + this.canvas.width*0.5);\r\n            this.pos.y = getRandomValueFromRange(this.player.pos.y - this.canvas.height*0.5, this.player.pos.y + this.canvas.height*0.5);\r\n            this.TimeoutHandler = setTimeout(callback, Math.random() * 10000 + 10000);\r\n        }\r\n        this.TimeoutHandler = setTimeout(callback, Math.random() * 10000 + 10000);\r\n    }\r\n\r\n    hide() {\r\n        if (!this.isShowing) { return };\r\n        this.isShowing = false;\r\n        clearTimeout(this.TimeoutHandler);\r\n    }\r\n \r\n}", "\uFEFFexport class Keyboard {\r\n    static keys = new Array(200);\r\n    static start() {\r\n        window.onkeydown = function keypress(evt) {\r\n            Keyboard.keys[evt.keyCode] = true;\r\n        }\r\n        window.onkeyup = function keypress(evt) {\r\n            Keyboard.keys[evt.keyCode] = false;\r\n        }\r\n    }\r\n} ", "\uFEFFimport { Assets } from \"../assets\";\r\nimport { Keyboard } from \"../utils/keyboard\";\r\nimport { getAngleFromVector, distance, NormalizeVectorFromPoints } from \"../utils/utils\";\r\n\r\nexport class Player {\r\n    rotV = { x: 0, y: 0 };\r\n    movV = { x: 0, y: 0 };\r\n    mousePos = { x: 0, y: 0 };\r\n\r\n    private blinkingEnginesProgress = 0;\r\n    private blinkingImortalityProgress = 0;\r\n    isImmortal = false;\r\n    constructor(private assets: Assets, public pos: {x: number; y: number }, private canvas: HTMLCanvasElement) {\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        this.pos.x += this.movV.x;\r\n        this.pos.y += this.movV.y;\r\n\r\n        this.rotV = NormalizeVectorFromPoints({ x: this.aimLocation.x + 7, y: this.aimLocation.y + 7 }, { x: this.pos.x, y: this.pos.y });\r\n\r\n        if (Keyboard.keys[32]) {\r\n            var dist = distance(this.pos, this.aimLocation);\r\n            dist = Math.sqrt(dist);\r\n            dist -= 7;\r\n            this.movV.x += this.rotV.x * dist / 22;\r\n            this.movV.y += this.rotV.y * dist / 22;\r\n        }\r\n        this.movV.x *= 0.92;\r\n        this.movV.y *= 0.92;\r\n\r\n        this.draw(ctx);\r\n    }\r\n    \r\n    get aimLocation() {\r\n        return {\r\n            x: this.pos.x - this.canvas.width/2 + this.mousePos.x,\r\n            y: this.pos.y - this.canvas.height/2 + this.mousePos.y,\r\n        }\r\n    }\r\n\r\n    private scale = 0.33\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        if (Keyboard.keys[32]) {\r\n            ctx.save();\r\n            this.blinkingEnginesProgress += 0.1;\r\n            ctx.translate(this.pos.x, this.pos.y);\r\n            ctx.rotate(getAngleFromVector(this.rotV));\r\n            ctx.globalAlpha = Math.sin(this.blinkingEnginesProgress)/2+1;\r\n            ctx.scale(this.scale, this.scale);\r\n            ctx.drawImage(this.assets.image_spaceship_engines, -45, -50);\r\n            ctx.restore();\r\n        }\r\n\r\n        ctx.save();\r\n        ctx.translate(this.pos.x, this.pos.y);\r\n        ctx.rotate(getAngleFromVector(this.rotV));\r\n        ctx.globalAlpha = 1.0;\r\n        ctx.scale(this.scale, this.scale);\r\n        ctx.drawImage(this.assets.image_spaceship, -45, -50);\r\n        ctx.restore();\r\n        if (this.isImmortal) {\r\n            this.blinkingImortalityProgress += 0.1;\r\n            ctx.save();\r\n            ctx.translate(this.pos.x, this.pos.y);\r\n            ctx.rotate(getAngleFromVector(this.rotV));\r\n            ctx.globalAlpha = Math.sin(this.blinkingImortalityProgress)/2+0.5;\r\n            ctx.scale(this.scale, this.scale);\r\n            ctx.drawImage(this.assets.image_shipshield, -45, -50);\r\n            ctx.globalAlpha = 1;\r\n            ctx.restore();\r\n        }\r\n    }\r\n}\r\n", "import { Assets } from \"../assets\";\r\n\r\nexport class Ui {\r\n    lifes: number = 5\r\n    score: number = 0\r\n    showHandlingOptions = true;\r\n    constructor(private assets: Assets, private canvas: HTMLCanvasElement) {\r\n        setTimeout(() => {\r\n            this.showHandlingOptions = false;\r\n        }, 10000)\r\n    }\r\n    \r\n    render(ctx: CanvasRenderingContext2D) {\r\n\r\n        ctx.textAlign = 'left';\r\n        ctx.font = \"25px Trebuchet MS\";\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillText(`Score: ${this.score}`, 12.5, 25);\r\n        for(let i = 0; i < this.lifes; i++) {\r\n            ctx.drawImage(this.assets.image_health, -25.5 + 37.5, -25.5 + 75 + i*50)\r\n        }\r\n        if (this.showHandlingOptions) {\r\n            ctx.font = \"16px Trebuchet MS\";\r\n            ctx.fillStyle = 'white';\r\n            ctx.fillText(`aim: \"Mouse\"`, 37.5 + 50, 67.5);\r\n            ctx.font = \"16px Trebuchet MS\";\r\n            ctx.fillStyle = 'white';\r\n            ctx.fillText(`shoot: \"Left Mouse\"`, 37.5 + 50, 92.6);\r\n            ctx.font = \"16px Trebuchet MS\";\r\n            ctx.fillStyle = 'white';\r\n            ctx.fillText(`accelerate: \"Space\"`, 37.5 + 50, 117.5);\r\n        }\r\n    }\r\n\r\n    renderDeath(ctx: CanvasRenderingContext2D) {\r\n        ctx.font = \"56px Trebuchet MS\";\r\n        ctx.fillStyle = 'red';\r\n        ctx.textAlign = 'center';\r\n        ctx.fillText(`YOU DIED`, this.canvas.width/2, this.canvas.height/2);\r\n    }\r\n}", "\uFEFFimport { Assets } from \"../assets\";\r\nimport { AsteroidContainer } from \"../components/asteroids\";\r\nimport { BulletContainer } from \"../components/bullet\";\r\nimport { Health } from \"../components/health\";\r\nimport { Player } from \"../components/player\";\r\nimport { Ui } from \"../components/ui\";\r\nimport { getAngleFromVector, distance } from \"../utils/utils\";\r\n\r\nexport class Game {\r\n    canvas: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D;\r\n    bulletContainer: BulletContainer;\r\n    player: Player;\r\n    health: Health;\r\n    asteroidsContainer: AsteroidContainer;\r\n    gameUi: Ui;\r\n\r\n    x = 0;\r\n    get isDead() {\r\n        return this.gameUi.lifes <= 0\r\n    }\r\n\r\n    constructor(private assets: Assets) {\r\n        this.canvas = document.getElementById('AsteroidCanvas') as HTMLCanvasElement;\r\n        this.canvas.width =  window.outerWidth;\r\n        this.canvas.height =  window.outerHeight;\r\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n        this.player = new Player(this.assets, {x: this.canvas.width/2, y: this.canvas.height/2}, this.canvas);\r\n        this.bulletContainer = new BulletContainer(this.assets, this.player);\r\n                this.health = new Health(this.assets.image_health, this.canvas, this.player);\r\n        this.asteroidsContainer = new AsteroidContainer(this.assets, this.player, this.canvas);\r\n        this.gameUi = new Ui(this.assets, this.canvas);\r\n\r\n        window.addEventListener('resize', this.resize.bind(this))\r\n        this.ctx.scale(0.5, 0.5);\r\n        this.resize();\r\n        this.startCheckingMouse();\r\n        \r\n    }\r\n\r\n    loop() {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.ctx.save();\r\n        this.ctx.translate(-this.player.pos.x + this.canvas.width/2, -this.player.pos.y + this.canvas.height/2);\r\n        if (!this.isDead) {\r\n            this.player.render(this.ctx);\r\n            if (this.gameUi.lifes < 5) {\r\n                this.health.show();\r\n            } else {\r\n                this.health.hide();\r\n            }\r\n            this.health.render(this.ctx);\r\n        }\r\n        this.asteroidsContainer.render(this.ctx);\r\n        this.bulletContainer.render(this.ctx);\r\n        this.ctx.restore();\r\n        this.gameUi.render(this.ctx);\r\n        if (this.isDead) {\r\n            this.gameUi.renderDeath(this.ctx);\r\n        }\r\n\r\n        this.checkBulletsAndAsteroidsCollision();\r\n        if (!this.isDead) {\r\n            this.checkPlayerAsteroidsCollision();\r\n            this.checkPlayerHealthCollision();\r\n        }\r\n        this.bcgrTranslation();\r\n        requestAnimationFrame(this.loop.bind(this));\r\n        \r\n    }\r\n\r\n    checkBulletsAndAsteroidsCollision() {\r\n        for (var j = 0; j < this.bulletContainer.bullets.length; j++) {\r\n            for (var k = 0; k < this.asteroidsContainer.asteroids.length; k++) {\r\n                const bullet = this.bulletContainer.bullets[j];\r\n                const asteroid = this.asteroidsContainer.asteroids[k];\r\n                if (distance(bullet.pos, asteroid.pos) < asteroid.size) {\r\n                    this.bulletContainer.bullets.splice(j, 1);\r\n                    asteroid.health -= 1;\r\n                    asteroid.size = asteroid.size*0.9;\r\n                    if (asteroid.health <= 0) {\r\n                        this.asteroidsContainer.asteroids.splice(k, 1);\r\n                        this.gameUi.score++;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    checkPlayerAsteroidsCollision() {\r\n        if (!this.player.isImmortal) {\r\n            for (var k = 0; k < this.asteroidsContainer.asteroids.length; k++) {\r\n                const asteroid = this.asteroidsContainer.asteroids[k];\r\n                if (distance(asteroid.pos, this.player.pos) < 15 + asteroid.size) {\r\n                    asteroid.health -= 1;\r\n                    asteroid.size = asteroid.size*0.9;\r\n                    if (asteroid.health <= 0) {\r\n                        this.asteroidsContainer.asteroids.splice(k, 1);\r\n                    }\r\n                    this.player.isImmortal = true;\r\n                    setTimeout(() => { this.player.isImmortal = false }, 3000);\r\n                    this.gameUi.lifes--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    checkPlayerHealthCollision() {\r\n        if(!this.health.available) return;\r\n        if (distance(this.health.pos, this.player.pos) < 15) {\r\n            this.gameUi.lifes++;\r\n            this.health.available = false;\r\n        }\r\n    }\r\n\r\n    bcgrTranslation() {\r\n        this.x += 0.0001;\r\n        var bgr_x = -this.player.pos.x/4;\r\n        var bgr_y = -this.player.pos.y/4;\r\n        this.canvas.style.backgroundPositionX = bgr_x.toString() + \"px\";\r\n        this.canvas.style.backgroundPositionY = bgr_y.toString() + \"px\";\r\n    }\r\n\r\n    resize() {\r\n        this.canvas.width = document.body.clientWidth;\r\n        this.canvas.height = document.body.clientHeight;\r\n    }\r\n\r\n    startCheckingMouse() {\r\n        this.canvas.onmousemove = (evt:any) => {\r\n            this.player.mousePos.x = evt.offsetX;\r\n            this.player.mousePos.y = evt.offsetY;\r\n        }\r\n        this.canvas.onmousedown = (evt:any) => {\r\n            if (!this.isDead) {\r\n                var angle = getAngleFromVector(this.player.rotV) - Math.PI / 2;\r\n                const bullets = [\r\n                    {x: Math.cos(angle - 0.78) * 29, y: Math.sin(angle - 0.78) * 29},\r\n                    {x: Math.cos(angle + 0.49) * 24, y: Math.sin(angle + 0.49) * 24},\r\n                    {x: Math.cos(angle - 0.2) * 43, y: Math.sin(angle - 0.2) * 43},\r\n                    {x: Math.cos(angle - 0.025) * 43, y: Math.sin(angle - 0.025) * 43},\r\n                ]\r\n                bullets.forEach(bullet => {\r\n                    this.bulletContainer.addBullet({ x: this.player.pos.x + bullet.x, y: this.player.pos.y + bullet.y }, this.player.rotV);\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { Assets } from \"./assets\";\r\nimport { Game } from \"./main/game\";\r\nimport { Keyboard } from \"./utils/keyboard\";\r\n\r\nwindow.onload =  async function () {\r\n    Keyboard.start();\r\n    const assets = new Assets();\r\n    await assets.preload();\r\n    const game = new Game(assets);\r\n    game.loop();\r\n}"],
  "mappings": "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",
  "names": ["distance"]
}
